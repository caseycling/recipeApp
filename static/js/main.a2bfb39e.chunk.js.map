{"version":3,"sources":["recipe.module.css","Recipe_logo.jpeg","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","async","fetch","response","json","data","hits","console","log","onSubmit","event","preventDefault","document","getElementById","type","placeholder","value","onChange","target","Image","id","mixBlendMode","key","label","Math","floor","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,kBCD1DD,EAAOC,QAAU,IAA0B,0C,iMCkB5BC,EAfA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACrC,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BAAKN,GACL,4BACKG,EAAYI,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,UAGxB,2BAAIR,GACJ,yBAAKG,UAAWC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,O,wBCqD1CC,EA7DH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,IAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAahBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAa,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACME,MAAM,mCAAD,OAAoCN,EAApC,mBAhBf,WAgBe,oBAfd,sCAcG,cACXO,EADW,kBAAAH,EAAA,MAEEG,EAASC,QAFX,OAEXC,EAFW,OAGjBZ,EAAWY,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,sCAmBnB,OACE,yBAAKxB,UAAU,OACb,0BAAM2B,SATQ,SAAAC,GAChBA,EAAMC,iBApBNC,SAASC,eAAe,eAAezB,IAAI,GAsB3CS,EAASH,GACTC,EAAU,KAKmBb,UAAU,eACnC,2BAAOA,UAAU,aAAagC,KAAK,OACnCC,YAAY,oDACZC,MAAOtB,EAAQuB,SAjBA,SAAAP,GACnBf,EAAUe,EAAMQ,OAAOF,OACvBT,QAAQC,IAAId,MAiBR,4BAAQZ,UAAU,gBAAgBgC,KAAK,UAAvC,WAEF,yBAAKhC,UAAU,WACb,yBAAKM,IAAK+B,IAAO9B,IAAI,GAAG+B,GAAG,cAAcrC,MAAO,CAAEsC,aAAc,cAC/D7B,EAAQP,KAAI,SAAAD,GAAM,OACjB,kBAAC,EAAD,CACEsC,IAAKtC,EAAOA,OAAOuC,MACnB7C,MAAOM,EAAOA,OAAOuC,MACrB5C,SAAU6C,KAAKC,MAAMzC,EAAOA,OAAOL,UACnCC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,oBC9CnB6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASC,eAAe,SD6H3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a2bfb39e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3hZUq\",\"image\":\"recipe_image__4VcZ0\"};","module.exports = __webpack_public_path__ + \"static/media/Recipe_logo.45ef0571.jpeg\";","import React from 'react';\r\nimport style from './recipe.module.css'\r\n\r\nconst Recipe = ({title, calories, image, ingredients}) => {\r\n    return(\r\n        <div className={style.recipe} >\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>{calories}</p>\r\n            <img className={style.image} src={image} alt=\"\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\nimport Image from './Recipe_logo.jpeg'\n\nconst App = () => {\n\n  const APP_ID = \"b2630a22\";\n  const APP_KEY = \"bf41122161d5eef385038956b189eb18\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState('');\n\n  const hideLogo = () => {\n    document.getElementById('recipeImage').src='';\n  };\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = event => {\n    setSearch(event.target.value);\n    console.log(search);\n  }\n\n  const getSearch = event => {\n    event.preventDefault();\n    hideLogo();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" \n        placeholder=\"Enter an ingredient to search for related recipes\" \n        value={search} onChange={updateSearch} \n        />\n        <button className=\"search-button\" type=\"submit\">Search</button>\n      </form>\n      <div className=\"recipes\">\n        <img src={Image} alt=\"\" id=\"recipeImage\" style={{ mixBlendMode: \"multiply\" }}/>\n        {recipes.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={Math.floor(recipe.recipe.calories)}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}